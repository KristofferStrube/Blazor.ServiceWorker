// This is the minified version of the service worker script defined in the library using https://codebeautify.org/minify-js
const params = new Proxy(new URLSearchParams(self.location.search), { get: (e, t) => e.get(t) }); let id = params.id, proxyDict = {}; function invokePost(e, t, o) { clients.matchAll({ type: "window", includeUncontrolled: !0 }).then((([r]) => { if (null != r) { proxyDict[t] = o; var i = { type: e, id: id, eventId: t }; r.postMessage(i) } })) } function resolvePost(e, t, o) { clients.matchAll({ type: "window", includeUncontrolled: !0 }).then((([r]) => { if (null != r) { var i = { type: `Resolve${e}`, id: t, object: o }; r.postMessage(i) } })) } function generateGUID() { var e = (new Date).getTime(), t = "undefined" != typeof performance && performance.now && 1e3 * performance.now() || 0; return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (o) { var r = 16 * Math.random(); return e > 0 ? (r = (e + r) % 16 | 0, e = Math.floor(e / 16)) : (r = (t + r) % 16 | 0, t = Math.floor(t / 16)), ("x" === o ? r : 3 & r | 8).toString(16) })) } self.oninstall = e => { invokePost("Install", generateGUID(), e) }, self.onactivate = e => { invokePost("Activate", generateGUID(), e) }, self.onfetch = e => { invokePost("Fetch", generateGUID(), e) }, self.onpush = e => { invokePost("Push", generateGUID(), e) }, self.addEventListener("message", (e => { var t = e.data; if ("GetProxyAttributeAsProxy" == t.type) { var o = proxyDict[t.id][t.attribute], r = generateGUID(); proxyDict[r] = o, resolvePost(t.type, t.id, r) } else if ("GetProxyAttribute" == t.type) { o = proxyDict[t.id][t.attribute]; resolvePost(t.type, t.id, o) } else if ("CallProxyMethodAsProxy" == t.type) { o = proxyDict[t.id][t.method].call(proxyDict[t.id]), r = generateGUID(); proxyDict[r] = o, resolvePost(t.type, t.id, r) } else if ("CallProxyMethod" == t.type) { o = proxyDict[t.id][t.method].call(proxyDict[t.id]); resolvePost(t.type, t.id, o) } })), skipWaiting();

